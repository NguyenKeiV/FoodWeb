import React, { useState, useEffect } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import { CheckCircle, XCircle, Loader2, Home, ShoppingBag } from "lucide-react";

interface PaymentStatus {
    orderCode: string;
    status: string;
    amount: number;
    paid: boolean;
    paidAt?: string;
    userId?: string;
}

const API_BASE_URL = (import.meta as any).env.VITE_API_BASE_URL || "https://foodweb-be.onrender.com/api";

const PaymentSuccess: React.FC = () => {
    const navigate = useNavigate();
    const [searchParams] = useSearchParams();
    const orderCode = searchParams.get("orderCode");

    const [loading, setLoading] = useState(true);
    const [paymentStatus, setPaymentStatus] = useState<PaymentStatus | null>(null);
    const [error, setError] = useState("");
    const [countdown, setCountdown] = useState(5); // Countdown timer

    useEffect(() => {
        if (!orderCode) {
            setError("Kh√¥ng t√¨m th·∫•y m√£ ƒë∆°n h√†ng");
            setLoading(false);
            return;
        }

        checkPaymentStatus();
    }, [orderCode]);

    // ‚úÖ Auto redirect countdown - FIXED VERSION
    useEffect(() => {
        if (!paymentStatus) return;

        console.log("üîÑ Payment status:", paymentStatus.status, "Paid:", paymentStatus.paid);

        // ‚úÖ N·∫øu PAID ‚Üí Redirect v·ªÅ trang ch·ªß sau 5s
        if (paymentStatus.status === "PAID" || paymentStatus.paid) {
            console.log("‚úÖ Payment successful, starting countdown...");

            let currentCount = 5;
            setCountdown(currentCount);

            const timer = setInterval(() => {
                currentCount -= 1;
                console.log(`‚è±Ô∏è  Countdown: ${currentCount}`);

                setCountdown(currentCount);

                if (currentCount <= 0) {
                    clearInterval(timer);
                    console.log("üöÄ Redirecting to home...");
                    // ‚úÖ Clear pending order tr∆∞·ªõc khi redirect
                    localStorage.removeItem('pendingOrder');
                    window.location.href = "/"; // ‚úÖ Force redirect
                }
            }, 1000);

            return () => {
                console.log("üßπ Cleanup timer");
                clearInterval(timer);
            };
        }

        // ‚úÖ N·∫øu CANCELLED ho·∫∑c FAILED ‚Üí Redirect v·ªÅ cart sau 5s
        if (paymentStatus.status === "CANCELLED" || paymentStatus.status === "FAILED") {
            console.log("‚ùå Payment failed/cancelled, starting countdown...");

            let currentCount = 5;
            setCountdown(currentCount);

            const timer = setInterval(() => {
                currentCount -= 1;
                console.log(`‚è±Ô∏è  Countdown: ${currentCount}`);

                setCountdown(currentCount);

                if (currentCount <= 0) {
                    clearInterval(timer);
                    console.log("üöÄ Redirecting to cart...");
                    // ‚úÖ Redirect v·ªÅ cart v·ªõi query param
                    window.location.href = "/cart?fromPayment=failed"; // ‚úÖ Force redirect
                }
            }, 1000);

            return () => {
                console.log("üßπ Cleanup timer");
                clearInterval(timer);
            };
        }
    }, [paymentStatus]);

    const checkPaymentStatus = async () => {
        try {
            setLoading(true);
            setError("");

            const response = await fetch(`${API_BASE_URL}/payment/status/${orderCode}`);
            const data = await response.json();

            if (data.success) {
                setPaymentStatus(data.data);

                // ‚úÖ N·∫æU THANH TO√ÅN TH√ÄNH C√îNG ‚Üí X√ìA PENDING ORDER TRONG LOCALSTORAGE
                if (data.data.status === "PAID" || data.data.paid) {
                    console.log("‚úÖ Payment successful - Clearing pending order from localStorage");
                    localStorage.removeItem('pendingOrder');

                    // ‚úÖ Optional: Clear cart cache n·∫øu c√≥
                    // ƒêi·ªÅu n√†y gi√∫p Cart.tsx t·ª± ƒë·ªông fetch l·∫°i t·ª´ server
                    console.log("‚úÖ Cart will be refreshed on next visit");
                }
            } else {
                setError(data.message || "Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i thanh to√°n");
            }
        } catch (err) {
            console.error("Error checking payment status:", err);
            setError("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server");
        } finally {
            setLoading(false);
        }
    };

    const formatPrice = (price: number): string => {
        return new Intl.NumberFormat("vi-VN", {
            style: "currency",
            currency: "VND",
        }).format(price);
    };

    const formatDate = (dateString?: string): string => {
        if (!dateString) return "";
        return new Date(dateString).toLocaleString("vi-VN");
    };

    const handleGoHomeNow = () => {
        console.log("üè† Manual redirect to home");
        // ‚úÖ Clear pending order tr∆∞·ªõc khi redirect
        localStorage.removeItem('pendingOrder');
        window.location.href = "/";
    };

    const handleGoToCartNow = () => {
        console.log("üõí Manual redirect to cart");
        // ‚úÖ Th√™m query param ƒë·ªÉ Cart bi·∫øt v·ª´a thanh to√°n xong
        window.location.href = "/cart?fromPayment=success";
    };

    if (loading) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-emerald-600 via-teal-600 to-cyan-600 flex items-center justify-center p-6">
                <div className="bg-white/10 backdrop-blur-lg border border-white/20 rounded-3xl p-12 text-center">
                    <Loader2 className="animate-spin text-white mx-auto mb-4" size={64} />
                    <p className="text-white text-xl font-semibold">ƒêang ki·ªÉm tra tr·∫°ng th√°i thanh to√°n...</p>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-red-600 via-rose-600 to-pink-600 flex items-center justify-center p-6">
                <div className="bg-white/10 backdrop-blur-lg border border-white/20 rounded-3xl p-12 text-center max-w-md">
                    <XCircle className="text-white mx-auto mb-6" size={80} />
                    <h1 className="text-3xl font-bold text-white mb-4">C√≥ l·ªói x·∫£y ra</h1>
                    <p className="text-white/90 text-lg mb-8">{error}</p>
                    <div className="flex gap-4 justify-center">
                        <button
                            onClick={handleGoHomeNow}
                            className="px-6 py-3 bg-white text-red-600 rounded-xl font-semibold hover:bg-gray-100 transition-all flex items-center gap-2"
                        >
                            <Home size={20} />
                            V·ªÅ trang ch·ªß
                        </button>
                        <button
                            onClick={checkPaymentStatus}
                            className="px-6 py-3 bg-white/20 text-white rounded-xl font-semibold hover:bg-white/30 transition-all"
                        >
                            Th·ª≠ l·∫°i
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    // ‚úÖ Thanh to√°n th√†nh c√¥ng
    if (paymentStatus?.status === "PAID" || paymentStatus?.paid) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-emerald-600 via-teal-600 to-cyan-600 flex items-center justify-center p-6">
                <div className="bg-white/10 backdrop-blur-lg border border-white/20 rounded-3xl p-12 text-center max-w-2xl w-full">
                    <div className="mb-8">
                        <CheckCircle className="text-white mx-auto mb-6 animate-bounce" size={100} />
                        <h1 className="text-4xl font-bold text-white mb-4">
                            Thanh to√°n th√†nh c√¥ng! üéâ
                        </h1>
                        <p className="text-white/90 text-lg mb-4">
                            C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng. ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.
                        </p>
                        <p className="text-emerald-200 text-sm">
                            Gi·ªè h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a t·ª± ƒë·ªông.
                        </p>
                    </div>

                    <div className="bg-white/10 rounded-2xl p-6 mb-8 text-left">
                        <h2 className="text-xl font-semibold text-white mb-4">Th√¥ng tin ƒë∆°n h√†ng</h2>
                        <div className="space-y-3">
                            <div className="flex justify-between text-white/90">
                                <span>M√£ ƒë∆°n h√†ng:</span>
                                <span className="font-semibold">#{paymentStatus.orderCode}</span>
                            </div>
                            <div className="flex justify-between text-white/90">
                                <span>S·ªë ti·ªÅn:</span>
                                <span className="font-semibold text-emerald-300">
                                    {formatPrice(paymentStatus.amount)}
                                </span>
                            </div>
                            <div className="flex justify-between text-white/90">
                                <span>Tr·∫°ng th√°i:</span>
                                <span className="font-semibold text-green-300">ƒê√£ thanh to√°n</span>
                            </div>
                            {paymentStatus.paidAt && (
                                <div className="flex justify-between text-white/90">
                                    <span>Th·ªùi gian:</span>
                                    <span className="font-semibold">{formatDate(paymentStatus.paidAt)}</span>
                                </div>
                            )}
                        </div>
                    </div>

                    {/* ‚úÖ Countdown Timer */}
                    <div className="mb-6 text-white/80 text-sm">
                        T·ª± ƒë·ªông chuy·ªÉn v·ªÅ trang ch·ªß sau <span className="font-bold text-white text-lg">{countdown}</span> gi√¢y...
                    </div>

                    <div className="flex gap-4 justify-center">
                        <button
                            onClick={handleGoHomeNow}
                            className="px-8 py-4 bg-white text-emerald-700 rounded-xl font-bold text-lg hover:bg-gray-100 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2"
                        >
                            <Home size={24} />
                            V·ªÅ trang ch·ªß ngay
                        </button>
                        <button
                            onClick={() => navigate("/orders")}
                            className="px-8 py-4 bg-white/20 text-white rounded-xl font-bold text-lg hover:bg-white/30 transition-all flex items-center gap-2"
                        >
                            <ShoppingBag size={24} />
                            Xem ƒë∆°n h√†ng
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    // ‚úÖ Thanh to√°n th·∫•t b·∫°i ho·∫∑c ƒëang ch·ªù
    return (
        <div className="min-h-screen bg-gradient-to-br from-amber-600 via-orange-600 to-red-600 flex items-center justify-center p-6">
            <div className="bg-white/10 backdrop-blur-lg border border-white/20 rounded-3xl p-12 text-center max-w-2xl w-full">
                <div className="mb-8">
                    <XCircle className="text-white mx-auto mb-6" size={100} />
                    <h1 className="text-4xl font-bold text-white mb-4">
                        Thanh to√°n ch∆∞a ho√†n t·∫•t
                    </h1>
                    <p className="text-white/90 text-lg mb-4">
                        {paymentStatus?.status === "CANCELLED"
                            ? "Giao d·ªãch ƒë√£ b·ªã h·ªßy."
                            : paymentStatus?.status === "FAILED"
                                ? "Giao d·ªãch th·∫•t b·∫°i."
                                : "Giao d·ªãch ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω. Vui l√≤ng ki·ªÉm tra l·∫°i sau."}
                    </p>
                    <p className="text-orange-200 text-sm">
                        Gi·ªè h√†ng c·ªßa b·∫°n v·∫´n ƒë∆∞·ª£c gi·ªØ nguy√™n.
                    </p>
                </div>

                <div className="bg-white/10 rounded-2xl p-6 mb-8 text-left">
                    <h2 className="text-xl font-semibold text-white mb-4">Th√¥ng tin ƒë∆°n h√†ng</h2>
                    <div className="space-y-3">
                        <div className="flex justify-between text-white/90">
                            <span>M√£ ƒë∆°n h√†ng:</span>
                            <span className="font-semibold">#{paymentStatus?.orderCode}</span>
                        </div>
                        <div className="flex justify-between text-white/90">
                            <span>S·ªë ti·ªÅn:</span>
                            <span className="font-semibold">{formatPrice(paymentStatus?.amount || 0)}</span>
                        </div>
                        <div className="flex justify-between text-white/90">
                            <span>Tr·∫°ng th√°i:</span>
                            <span className="font-semibold text-yellow-300">
                                {paymentStatus?.status || "ƒêang x·ª≠ l√Ω"}
                            </span>
                        </div>
                    </div>
                </div>

                {/* ‚úÖ Countdown Timer for failed payments */}
                {(paymentStatus?.status === "CANCELLED" || paymentStatus?.status === "FAILED") && (
                    <div className="mb-6 text-white/80 text-sm">
                        T·ª± ƒë·ªông chuy·ªÉn v·ªÅ gi·ªè h√†ng sau <span className="font-bold text-white text-lg">{countdown}</span> gi√¢y...
                    </div>
                )}

                <div className="flex gap-4 justify-center">
                    <button
                        onClick={handleGoToCartNow}
                        className="px-8 py-4 bg-white text-orange-700 rounded-xl font-bold text-lg hover:bg-gray-100 transition-all transform hover:scale-105 shadow-lg flex items-center gap-2"
                    >
                        <ShoppingBag size={24} />
                        V·ªÅ gi·ªè h√†ng
                    </button>
                    <button
                        onClick={checkPaymentStatus}
                        className="px-8 py-4 bg-white/20 text-white rounded-xl font-bold text-lg hover:bg-white/30 transition-all"
                    >
                        Ki·ªÉm tra l·∫°i
                    </button>
                    <button
                        onClick={handleGoHomeNow}
                        className="px-8 py-4 bg-white/10 text-white rounded-xl font-bold text-lg hover:bg-white/20 transition-all flex items-center gap-2"
                    >
                        <Home size={24} />
                        V·ªÅ trang ch·ªß
                    </button>
                </div>
            </div>
        </div>
    );
};

export default PaymentSuccess;